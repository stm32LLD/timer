// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
////////////////////////////////////////////////////////////////////////////////
/**
*@file      timer_cfg.c
*@brief     Configuration for Timer LL Driver based on STM32 HAL library
*@author    Ziga Miklosic
*@email     ziga.miklosic@gmail.si
*@date      25.04.2023
*@version   V0.1.0
*/
////////////////////////////////////////////////////////////////////////////////
/*!
* @addtogroup TIMER_CFG
* @{ <!-- BEGIN GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include "timer_cfg.h"

// USER INCLUDE BEGIN...

#include "config/proj_cfg.h"
#include "config/pin_mapper.h"

// USER INCLUDE END.

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

/**
 *      Timer Instance Configuration
 */
static const tim_inst_cfg_t g_tim_inst_cfg[eTIM_INST_NUM_OF] =
{
    // USER CODE BEGIN...

    /**
     *      TIM2 is being used for RTOS diagnostics purposes as free running timer
     *
     *  Timer input clock frequency:    80 MHz
     *  Timer base clock frequency:     100 kHz = 80MHz/800 (psc), resolution@100kHz = 10us
     */
    [eTIM2_RTOS]    = { .p_instance = TIM2, .psc = 800U, .per = UINT32_MAX, .mode = TIM_COUNTERMODE_UP, .start = true },


    // USER CODE END...
};


////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup TIMER_CFG_API
* @{ <!-- BEGIN GROUP -->
*
* 	Following function are part of Timer Configuration API.
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*       Get Timer configurations
*
* @return       &g_tim_inst_cfg - Address to UART config table
*/
////////////////////////////////////////////////////////////////////////////////
tim_inst_cfg_t * timer_cfg_get_inst(const timer_inst_t tim_inst)
{
    TIMER_ASSERT( tim_inst < eTIM_INST_NUM_OF );

    return (tim_inst_cfg_t*) &g_tim_inst_cfg[tim_inst];
}

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
